version: 2.1
# Use a package of configuration called an orb.
# orbs:
#   # Choose either one of the orbs below 
#   # welcome: circleci/welcome-orb@0.4.1
#   aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}

# Define the jobs we want to run for this project
jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-2
  

  # Exercise: Config and Deployment
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a9:2f:32:0c:9d:74:c5:f0:80:93:ad:07:35:32:0b:82"]
      - run:
          name: Install Dependecies
          command: |
            apk add --update ansible
      - run:
          name: Configure Server
          command: |
            ansible-playbook -i inventory.txt main-remote.yml
      # - run: return 1
      - destroy_environment
       

  # Exercise: Smoke Testing
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: Smoke Test
          command: |
            URL="https://blog.udacity.com"
            # Testing if website exists or not
            if curl -s --head ${URL}
            then
              return 0
            else
              return 1
            fi

  # Exercise: Rollback - (This smoke test is set to fail to trigger a rollback)
  smoke_test2:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Test Job
          # Fail the job intentionally to simulate an error.
          command:  return 1
      # - destroy_environment
      #   when: on_fail


  # Job 1
  # Executes the bucket.yml - Deploy an S3 bucket, and interface with that bucket to synchronize the files between local and the bucket.
  # Note that the `--parameter-overrides` let you specify a value that override parameter value in the bucket.yml template file.
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml which creates Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete


  # Exercise: Promote to Production - Job 2
  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt
      - run: cat text.file

  # Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`. 
  # Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive


# Sequential workflow
workflows: 
  # Name the workflow
  myWorkflow:
    jobs:
      # - create_infrastructure
      #  - configure_infrastructure
      # - smoke_test2
      # - create_and_deploy_front_end
      - get_last_deployment_id
      # - promote_to_production
      # - clean_up_old_front_end

      # - create_and_deploy_front_end
      # - promote_to_production:
      #     requires: 
      #       - create_and_deploy_front_end
      # - get_last_deployment_id
      # - clean_up_old_front_end:
      #     requires:
      #       - get_last_deployment_id
      #       - promote_to_production

# VS Code Extension Version: 1.5.1